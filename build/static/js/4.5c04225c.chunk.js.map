{"version":3,"sources":["components/quotes/HighlightedQuote.module.css","components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.js","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","pages/QuoteDetail.js"],"names":["module","exports","HighlightedQuote","props","className","classes","quote","text","author","NewCommentForm","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredtext","current","value","commentData","quoteId","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","QuoteDetail","match","useRouteMatch","params","console","log","getSingleQuote","loadedQuote","path","to","url"],"mappings":"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","file":"static/js/4.5c04225c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__F67A8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__1dzuS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__1LZfB\",\"loading\":\"NewCommentForm_loading__1gQd1\",\"control\":\"NewCommentForm_control__2ng2i\",\"actions\":\"NewCommentForm_actions__2MKzU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__1auG2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__2EGI9\"};","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useRef, useEffect } from 'react';\n\nimport useHttp from '../../hooks/use-http';\nimport { addComment } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\nimport classes from './NewCommentForm.module.css';\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  const { onAddedComment } = props;\n\n  useEffect(() => {\n    if( status === 'completed' && !error) {\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    // optional: Could validate here\n\n    // send comment to server\n\n    const enteredtext = commentTextRef.current.value;\n\n    sendRequest({commentData: {text: enteredtext} , quoteId: props.quoteId });\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === 'pending' && <div className='centered'><LoadingSpinner /></div>}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\nimport useHttp from '../../hooks/use-http';\nimport { getAllComments } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\nimport CommentsList from './CommentsList';\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n\n  const { quoteId } = params;\n\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n\n  useEffect(() => {\n    sendRequest(quoteId)\n  }, [quoteId, sendRequest]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId)\n  }, [sendRequest, quoteId]);\n\n  let comments;\n\n  if(status === 'pending') {\n    comments = (\n      <div className='centered'>\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if( status === 'completed' && (loadedComments && loadedComments.length > 0) ) {\n    comments = <CommentsList comments={loadedComments} />\n  }\n\n  if( status === 'completed' && (!loadedComments || loadedComments.length === 0)) {\n    comments = <p className='centered'>No comments were added yet!</p>\n  }\n  \n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className='btn' onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && <NewCommentForm quoteId={quoteId} onAddedComment={addedCommentHandler} />}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import { Fragment, useEffect } from 'react';\r\nimport { useParams, Route, Link, useRouteMatch } from 'react-router-dom';\r\n\r\nimport HighlightedQuote from '../components/quotes/HighlightedQuote';\r\nimport Comments from '../components/comments/Comments';\r\n\r\nimport useHttp from '../hooks/use-http';\r\nimport  { getSingleQuote } from  '../lib/api';\r\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\r\n\r\n// const DUMMY_QUOTES = [\r\n//     { id: 'q1', author: 'Max', text: 'Learning React is fun!' },\r\n//     { id: 'q2', author: 'Milllian', text: 'Learning React is great!' },\r\n// ];\r\n\r\nconst QuoteDetail = () => {\r\n\r\n    const match  = useRouteMatch();\r\n    const params = useParams();\r\n    console.log(match);\r\n\r\n    const { quoteId } = params;\r\n    \r\n    const { sendRequest, status, data: loadedQuote, error } = useHttp(getSingleQuote, true);\r\n    console.log(\"loadedQuote\", loadedQuote);\r\n    useEffect(() => {\r\n        sendRequest(quoteId);\r\n    }, [sendRequest, quoteId]);\r\n\r\n    if(status === 'pending') {\r\n        return <div className=\"centered\">\r\n            <LoadingSpinner />\r\n        </div>\r\n    }\r\n\r\n    if(error) {\r\n        return <p className=\"centered\">{error}</p>\r\n    }\r\n\r\n    // const quote = DUMMY_QUOTES.find(quote => quote.id === params.quoteId);\r\n    if(!loadedQuote.text) {\r\n        return <p>No quote found!</p>\r\n    }\r\n    return (\r\n        <Fragment >\r\n            {/* <HighlightedQuote text={quote.text} author={quote.author} /> */}\r\n            <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\r\n            <Route path={match.path}>\r\n                <div className=\"centered\">\r\n                    <Link className='btn--flat' to={`${match.url}/comments`}>Load Comments</Link>\r\n                </div>\r\n            </Route>\r\n            <Route path={`${match.path}/comments`}>\r\n                <Comments />\r\n            </Route>\r\n        </Fragment>\r\n    )\r\n};\r\n\r\nexport default QuoteDetail;"],"sourceRoot":""}